require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/comments", type: :request do
  include Devise::Test::IntegrationHelpers
  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }
  #
  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  let(:user) { User.create!(First_name: "Example User",Last_name: "p",email: "name6@gmail.com",password: "123456") }
  let(:movie) { Movie.create(Name: "Test Movie",user_id: user.id,release_date:'05/05/2023') }

  let(:valid_attributes) {
    { comment: "Test Comment", movie_id: movie.id, user_id: user.id }
  }
  let(:invalid_attributes) {
    { comment: nil, movie_id: nil, user_id: nil }
  }

  before do
    sign_in user
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Comment" do
        expect {
          post movie_comments_url(movie_id: movie.id), params: { comment: valid_attributes }
        }.to change(Comment, :count).by(1)
      end

      it "redirects to the created comment" do
        post movie_comments_url(movie_id: movie.id), params: { comment: valid_attributes }
        puts response.status
        expect(response).to redirect_to(movie_path(movie.id))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Comment" do
        expect {
          post movie_comments_url(movie_id: movie.id), params: { comment: invalid_attributes }
        }.to change(Comment, :count).by(0)
      end


      it "renders a successful response (i.e. to display the 'new' template)" do
        post movie_comments_url(movie.id), params: { comment: invalid_attributes }
        expect(response).to be_successful
      end

    end
  end
end
